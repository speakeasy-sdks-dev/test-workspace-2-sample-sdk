<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace myapi;

class APIProductVersionSpecification 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Create API Product Version Specification
     * 
     * Creates a specification for a version of an API product.
     * **Note:** You can only have one specification for a product version.
     * 
     * 
     * @param \myapi\Models\Operations\CreateApiProductVersionSpecRequest $request
     * @return \myapi\Models\Operations\CreateApiProductVersionSpecResponse
     */
	public function createApiProductVersionSpec(
        \myapi\Models\Operations\CreateApiProductVersionSpecRequest $request,
    ): \myapi\Models\Operations\CreateApiProductVersionSpecResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{apiProductId}/product-versions/{productVersionId}/specifications', \myapi\Models\Operations\CreateApiProductVersionSpecRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createAPIProductVersionSpecDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/problem+json;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \myapi\Models\Operations\CreateApiProductVersionSpecResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiProductVersionSpec = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\APIProductVersionSpec', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\BadRequestError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\NotFoundError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\ConflictError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 415) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsupportedMediaTypeError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\UnsupportedMediaTypeError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete API Product Version Specification
     * 
     * Removes a specification from a verion of an API product.
     * 
     * @param \myapi\Models\Operations\DeleteApiProductVersionSpecRequest $request
     * @return \myapi\Models\Operations\DeleteApiProductVersionSpecResponse
     */
	public function deleteApiProductVersionSpec(
        ?\myapi\Models\Operations\DeleteApiProductVersionSpecRequest $request,
    ): \myapi\Models\Operations\DeleteApiProductVersionSpecResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{apiProductId}/product-versions/{productVersionId}/specifications/{specificationId}', \myapi\Models\Operations\DeleteApiProductVersionSpecRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/problem+json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \myapi\Models\Operations\DeleteApiProductVersionSpecResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\NotFoundError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch API Product Version Specification
     * 
     * Returns a specification for the version of an API product.
     * 
     * @param \myapi\Models\Operations\GetApiProductVersionSpecRequest $request
     * @return \myapi\Models\Operations\GetApiProductVersionSpecResponse
     */
	public function getApiProductVersionSpec(
        ?\myapi\Models\Operations\GetApiProductVersionSpecRequest $request,
    ): \myapi\Models\Operations\GetApiProductVersionSpecResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{apiProductId}/product-versions/{productVersionId}/specifications/{specificationId}', \myapi\Models\Operations\GetApiProductVersionSpecRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/problem+json;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \myapi\Models\Operations\GetApiProductVersionSpecResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiProductVersionSpec = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\APIProductVersionSpec', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\NotFoundError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch API Product Version Specifications
     * 
     * Returns a list of specification for the version of an API product.
     * **Note:** You can only have one specification for a product version.
     * 
     * 
     * @param \myapi\Models\Operations\GetManyApiProductVersionSpecRequest $request
     * @return \myapi\Models\Operations\GetManyApiProductVersionSpecResponse
     */
	public function getManyApiProductVersionSpec(
        ?\myapi\Models\Operations\GetManyApiProductVersionSpecRequest $request,
    ): \myapi\Models\Operations\GetManyApiProductVersionSpecResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{apiProductId}/product-versions/{productVersionId}/specifications', \myapi\Models\Operations\GetManyApiProductVersionSpecRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/problem+json;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \myapi\Models\Operations\GetManyApiProductVersionSpecResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAPIProductVersionSpecResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Operations\GetManyAPIProductVersionSpecListAPIProductVersionSpecResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\NotFoundError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an API Product Version Specification
     * 
     * Updates a specification from an API product version.
     * 
     * @param \myapi\Models\Operations\UpdateApiProductVersionSpecRequest $request
     * @return \myapi\Models\Operations\UpdateApiProductVersionSpecResponse
     */
	public function updateApiProductVersionSpec(
        \myapi\Models\Operations\UpdateApiProductVersionSpecRequest $request,
    ): \myapi\Models\Operations\UpdateApiProductVersionSpecResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{apiProductId}/product-versions/{productVersionId}/specifications/{specificationId}', \myapi\Models\Operations\UpdateApiProductVersionSpecRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateAPIProductVersionSpecDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/problem+json;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \myapi\Models\Operations\UpdateApiProductVersionSpecResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiProductVersionSpec = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\APIProductVersionSpec', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\BadRequestError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\NotFoundError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\ConflictError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 415) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsupportedMediaTypeError = $serializer->deserialize((string)$httpResponse->getBody(), 'myapi\Models\Shared\UnsupportedMediaTypeError', 'json');
            }
        }

        return $response;
    }
}