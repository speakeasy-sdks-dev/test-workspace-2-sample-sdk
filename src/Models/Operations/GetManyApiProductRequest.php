<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace myapi\Models\Operations;

use \myapi\Utils\SpeakeasyMetadata;
class GetManyApiProductRequest
{
    /**
     * Filters API Products in the response.
     * 
     * @var ?\myapi\Models\Shared\APIProductFilterParameters $filter
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter')]
    public ?\myapi\Models\Shared\APIProductFilterParameters $filter = null;
    
    /**
     * Filters requested resource by associated labels.
     * 
     * @var ?string $labels
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=labels')]
    public ?string $labels = null;
    
    /**
     * Determines which page of the entities to retrieve.
     * 
     * @var ?int $pageNumber
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page[number]')]
    public ?int $pageNumber = null;
    
    /**
     * The maximum number of items to include per page. The last page of a collection may include fewer items.
     * 
     * @var ?int $pageSize
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page[size]')]
    public ?int $pageSize = null;
    
    /**
     * Sorts a collection of API products. Supported sort attributes are:
     * 
     *   - name
     * 
     * 
     * @var ?string $sort
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort')]
    public ?string $sort = null;
    
	public function __construct()
	{
		$this->filter = null;
		$this->labels = null;
		$this->pageNumber = null;
		$this->pageSize = null;
		$this->sort = null;
	}
}
