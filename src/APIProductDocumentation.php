<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace test_workspace-2\Konnect-API;

class APIProductDocumentation 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Create API Product Document
     * 
     * Creates a document for an API product.
     * 
     * @param \test_workspace-2\Konnect-API\Models\Operations\CreateApiProductDocumentRequest $request
     * @return \test_workspace-2\Konnect-API\Models\Operations\CreateApiProductDocumentResponse
     */
	public function createApiProductDocument(
        \test_workspace-2\Konnect-API\Models\Operations\CreateApiProductDocumentRequest $request,
    ): \test_workspace-2\Konnect-API\Models\Operations\CreateApiProductDocumentResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{apiProductId}/documents', \test_workspace-2\Konnect-API\Models\Operations\CreateApiProductDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createAPIProductDocumentDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/problem+json;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \test_workspace-2\Konnect-API\Models\Operations\CreateApiProductDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiProductDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\APIProductDocument', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\BadRequestError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\NotFoundError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createApiProductDocument409ApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Operations\CreateApiProductDocument409ApplicationProblemPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 415) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsupportedMediaTypeError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnsupportedMediaTypeError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete API Product Documentation
     * 
     * Removes a document from an API product.
     * 
     * @param \test_workspace-2\Konnect-API\Models\Operations\DeleteApiProductDocumentRequest $request
     * @return \test_workspace-2\Konnect-API\Models\Operations\DeleteApiProductDocumentResponse
     */
	public function deleteApiProductDocument(
        ?\test_workspace-2\Konnect-API\Models\Operations\DeleteApiProductDocumentRequest $request,
    ): \test_workspace-2\Konnect-API\Models\Operations\DeleteApiProductDocumentResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{apiProductId}/documents/{id}', \test_workspace-2\Konnect-API\Models\Operations\DeleteApiProductDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/problem+json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \test_workspace-2\Konnect-API\Models\Operations\DeleteApiProductDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\NotFoundError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch API Product Document
     * 
     * Returns a document for the API product.
     * 
     * @param \test_workspace-2\Konnect-API\Models\Operations\GetApiProductDocumentRequest $request
     * @return \test_workspace-2\Konnect-API\Models\Operations\GetApiProductDocumentResponse
     */
	public function getApiProductDocument(
        ?\test_workspace-2\Konnect-API\Models\Operations\GetApiProductDocumentRequest $request,
    ): \test_workspace-2\Konnect-API\Models\Operations\GetApiProductDocumentResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{apiProductId}/documents/{id}', \test_workspace-2\Konnect-API\Models\Operations\GetApiProductDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/problem+json;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \test_workspace-2\Konnect-API\Models\Operations\GetApiProductDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiProductDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\APIProductDocument', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\NotFoundError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List API Product Documents
     * 
     * Returns a collection of all documents for an API product.
     * 
     * @param \test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductDocumentRequest $request
     * @return \test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductDocumentResponse
     */
	public function getManyApiProductDocument(
        ?\test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductDocumentRequest $request,
    ): \test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductDocumentResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{apiProductId}/documents', \test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductDocumentRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, application/problem+json;q=0.7, application/vnd.konnect.document-tree+json;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getManyApiProductDocument200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductDocument200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.konnect.document-tree+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getManyApiProductDocument200ApplicationVndKonnectDocumentTreePlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductDocument200ApplicationVndKonnectDocumentTreePlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\BadRequestError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\NotFoundError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an API Product Document
     * 
     * Updates a document for an API product.
     * 
     * @param \test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductDocumentRequest $request
     * @return \test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductDocumentResponse
     */
	public function updateApiProductDocument(
        \test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductDocumentRequest $request,
    ): \test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductDocumentResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{apiProductId}/documents/{id}', \test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateAPIProductDocumentDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/problem+json;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiProductDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\APIProductDocument', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\BadRequestError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\NotFoundError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateApiProductDocument409ApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductDocument409ApplicationProblemPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 415) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsupportedMediaTypeError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnsupportedMediaTypeError', 'json');
            }
        }

        return $response;
    }
}