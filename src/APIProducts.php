<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace test_workspace-2\Konnect-API;

class APIProducts 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Create API Product
     * 
     * An API Product packages together associated APIs and their operations, backed by thorough documentation,
     * with the objective of making API consumption straightforward for developers.
     * 
     * 
     * @param \test_workspace-2\Konnect-API\Models\Shared\CreateAPIProductDTO $request
     * @return \test_workspace-2\Konnect-API\Models\Operations\CreateApiProductResponse
     */
	public function createApiProduct(
        \test_workspace-2\Konnect-API\Models\Shared\CreateAPIProductDTO $request,
    ): \test_workspace-2\Konnect-API\Models\Operations\CreateApiProductResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/problem+json;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \test_workspace-2\Konnect-API\Models\Operations\CreateApiProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\APIProduct', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\BadRequestError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 415) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsupportedMediaTypeError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnsupportedMediaTypeError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete API Product
     * 
     * Removes an individual API product.
     * 
     * @param \test_workspace-2\Konnect-API\Models\Operations\DeleteApiProductRequest $request
     * @return \test_workspace-2\Konnect-API\Models\Operations\DeleteApiProductResponse
     */
	public function deleteApiProduct(
        ?\test_workspace-2\Konnect-API\Models\Operations\DeleteApiProductRequest $request,
    ): \test_workspace-2\Konnect-API\Models\Operations\DeleteApiProductResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{id}', \test_workspace-2\Konnect-API\Models\Operations\DeleteApiProductRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/problem+json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \test_workspace-2\Konnect-API\Models\Operations\DeleteApiProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\NotFoundError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch API product
     * 
     * Returns an API product.
     * 
     * @param \test_workspace-2\Konnect-API\Models\Operations\GetApiProductRequest $request
     * @return \test_workspace-2\Konnect-API\Models\Operations\GetApiProductResponse
     */
	public function getApiProduct(
        ?\test_workspace-2\Konnect-API\Models\Operations\GetApiProductRequest $request,
    ): \test_workspace-2\Konnect-API\Models\Operations\GetApiProductResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{id}', \test_workspace-2\Konnect-API\Models\Operations\GetApiProductRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/problem+json;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \test_workspace-2\Konnect-API\Models\Operations\GetApiProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\APIProduct', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\NotFoundError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List API Products
     * 
     * Returns a collection of API products.
     * 
     * @param \test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductRequest $request
     * @return \test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductResponse
     */
	public function getManyApiProduct(
        ?\test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductRequest $request,
    ): \test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, application/problem+json;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \test_workspace-2\Konnect-API\Models\Operations\GetManyApiProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAPIProductsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Operations\GetManyAPIProductListAPIProductsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\BadRequestError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\NotFoundError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an individual API product
     * 
     * Updates an API product.
     * 
     * @param \test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductRequest $request
     * @return \test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductResponse
     */
	public function updateApiProduct(
        \test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductRequest $request,
    ): \test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api-products/{id}', \test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateAPIProductDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/problem+json;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \test_workspace-2\Konnect-API\Models\Operations\UpdateApiProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\APIProduct', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\BadRequestError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unauthorizedError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnauthorizedError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forbiddenError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\ForbiddenError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFoundError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\NotFoundError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 415) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsupportedMediaTypeError = $serializer->deserialize((string)$httpResponse->getBody(), 'test_workspace-2\Konnect-API\Models\Shared\UnsupportedMediaTypeError', 'json');
            }
        }

        return $response;
    }
}